- name: Install pyenv build dependencies
  become: yes
  ansible.builtin.apt:
    name:
      - make
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - curl
      - git
      - libncursesw5-dev
      - xz-utils
      - tk-dev
      - libxml2-dev
      - libxmlsec1-dev
      - libffi-dev
      - liblzma-dev
    state: present

- name: Check if pyenv is already installed
  ansible.builtin.stat:
    path: "{{ ansible_user_dir }}/.pyenv/bin/pyenv"
  register: pyenv_installed

- name: Install pyenv if not already installed
  ansible.builtin.shell: |
    curl -fsSL https://pyenv.run | bash
  args:
    executable: /bin/bash
  when: not pyenv_installed.stat.exists

- name: Ensure PYENV_ROOT is set in .bashrc
  ansible.builtin.lineinfile:
    path: "{{ ansible_user_dir }}/.bashrc"
    line: 'export PYENV_ROOT="$HOME/.pyenv"'
    insertafter: EOF
    state: present

- name: Ensure pyenv bin is in PATH
  ansible.builtin.lineinfile:
    path: "{{ ansible_user_dir }}/.bashrc"
    line: '[[ -d "$PYENV_ROOT/bin" ]] && export PATH="$PYENV_ROOT/bin:$PATH"'
    insertafter: EOF
    state: present

- name: Ensure pyenv is initialized
  ansible.builtin.lineinfile:
    path: "{{ ansible_user_dir }}/.bashrc"
    line: 'eval "$(pyenv init - bash)"'
    insertafter: EOF
    state: present

# Important: reload .bashrc to make pyenv command available immediately
- name: Source bashrc immediately
  ansible.builtin.shell: |
    source "{{ ansible_user_dir }}/.bashrc"
  args:
    executable: /bin/bash
  changed_when: false

- name: Check if Python {{ python_version }} is already installed by pyenv
  ansible.builtin.shell: |
    {{ ansible_user_dir }}/.pyenv/bin/pyenv versions --bare | grep -Fx '{{ python_version }}'
  args:
    executable: /bin/bash
  register: pyenv_version_check
  changed_when: false
  failed_when: pyenv_version_check.rc not in [0,1]  # grep returns 1 if not found, that's acceptable

- name: Install Python {{ python_version }} using pyenv if not present
  ansible.builtin.shell: |
    {{ ansible_user_dir }}/.pyenv/bin/pyenv install {{ python_version }}
  args:
    executable: /bin/bash
  when: pyenv_version_check.rc == 1

- name: Get current global Python version
  ansible.builtin.shell: |
    {{ ansible_user_dir }}/.pyenv/bin/pyenv global
  args:
    executable: /bin/bash
  register: pyenv_global_version
  changed_when: false
  failed_when: false

- name: Set global Python version to {{ python_version }}
  ansible.builtin.shell: |
    {{ ansible_user_dir }}/.pyenv/bin/pyenv global {{ python_version }}
  args:
    executable: /bin/bash
  when: python_version not in pyenv_global_version.stdout

- name: Create tar.gz archive of Python {{ python_version }} (for Pi Zeros)
  ansible.builtin.shell: |
    cd {{ ansible_user_dir }}/.pyenv/versions
    tar czf /tmp/python{{ python_version }}-arm64.tar.gz {{ python_version }}
  args:
    creates: "/tmp/python{{ python_version }}-arm64.tar.gz"

- name: Fetch compiled Python archive from Pi 5 to Ansible control host
  ansible.builtin.fetch:
    src: "/tmp/python{{ python_version }}-arm64.tar.gz"
    dest: "./files/python{{ python_version }}-arm64.tar.gz"
    flat: yes
