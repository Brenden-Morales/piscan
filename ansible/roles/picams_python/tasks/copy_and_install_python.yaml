- name: Ensure pyenv build dependencies are installed (recommended)
  become: yes
  ansible.builtin.apt:
    name:
      - make
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - curl
      - git
      - libncursesw5-dev
      - xz-utils
      - tk-dev
      - libxml2-dev
      - libxmlsec1-dev
      - libffi-dev
      - liblzma-dev
    state: present

- name: Check if .pyenv is a valid git repo
  stat:
    path: "{{ ansible_user_dir }}/.pyenv/.git"
  register: pyenv_git_check

- name: Remove existing invalid pyenv directory (if present and invalid)
  file:
    path: "{{ ansible_user_dir }}/.pyenv"
    state: absent
  when: not pyenv_git_check.stat.exists

- name: Clone or update pyenv
  git:
    repo: "https://github.com/pyenv/pyenv.git"
    dest: "{{ ansible_user_dir }}/.pyenv"
    update: yes
    force: yes

- name: Ensure pyenv environment variables in .bashrc
  lineinfile:
    path: "{{ ansible_user_dir }}/.bashrc"
    line: '{{ item }}'
    state: present
  loop:
    - 'export PYENV_ROOT="$HOME/.pyenv"'
    - 'export PATH="$PYENV_ROOT/bin:$PATH"'
    - 'eval "$(pyenv init --path)"'
    - 'eval "$(pyenv init -)"'

- name: Ensure PYENV_ROOT versions directory exists
  file:
    path: "{{ ansible_user_dir }}/.pyenv/versions"
    state: directory
    mode: '0755'

- name: Calculate SHA256 checksum of Python archive on Ansible controller
  delegate_to: localhost
  run_once: true
  stat:
    path: "files/python{{ python_version }}-arm64.tar.gz"
    checksum_algorithm: sha256
  register: local_python_archive_stat

- name: Check existing SHA256 checksum of Python archive on Pi Zeros
  stat:
    path: "/tmp/python{{ python_version }}-arm64.tar.gz"
    checksum_algorithm: sha256
  register: remote_python_archive_stat

- name: Copy compiled Python archive to Pi Zeros only if checksum differs
  ansible.builtin.copy:
    src: "files/python{{ python_version }}-arm64.tar.gz"
    dest: "/tmp/python{{ python_version }}-arm64.tar.gz"
    mode: '0644'
  when: (remote_python_archive_stat.stat.checksum is not defined) or
    (remote_python_archive_stat.stat.checksum != local_python_archive_stat.stat.checksum)

- name: Extract compiled Python binaries
  ansible.builtin.unarchive:
    src: "/tmp/python{{ python_version }}-arm64.tar.gz"
    dest: "{{ ansible_user_dir }}/.pyenv/versions/"
    remote_src: yes
    creates: "{{ ansible_user_dir }}/.pyenv/versions/{{ python_version }}/bin/python3"

- name: Set global Python version to {{ python_version }}
  ansible.builtin.shell: |
    export PYENV_ROOT="{{ ansible_user_dir }}/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    pyenv global {{ python_version }}
    pyenv rehash
  args:
    executable: /bin/bash

- name: Add Python shared library path to ld.so.conf.d (system-wide fix)
  become: yes
  ansible.builtin.copy:
    dest: "/etc/ld.so.conf.d/python-{{ python_version }}.conf"
    content: "{{ ansible_user_dir }}/.pyenv/versions/{{ python_version }}/lib"
    mode: '0644'

- name: Run ldconfig to reload library paths
  become: yes
  ansible.builtin.command: ldconfig

- name: Verify Python version after library fix
  ansible.builtin.shell: |
    {{ ansible_user_dir }}/.pyenv/shims/python --version
  register: python_check
  changed_when: false

- name: Display installed Python version
  ansible.builtin.debug:
    msg: "{{ python_check.stdout }}"
