- name: Ensure pyenv build dependencies are installed (optional but recommended)
  become: yes
  ansible.builtin.apt:
    name:
      - make
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - curl
      - git
      - libncursesw5-dev
      - xz-utils
      - tk-dev
      - libxml2-dev
      - libxmlsec1-dev
      - libffi-dev
      - liblzma-dev
    state: present

- name: Ensure PYENV_ROOT directory exists
  file:
    path: "{{ ansible_user_dir }}/.pyenv/versions"
    state: directory
    mode: '0755'

- name: Copy compiled Python archive to Pi Zeros
  ansible.builtin.copy:
    src: "files/python{{ python_version }}-arm64.tar.gz"
    dest: "/tmp/python{{ python_version }}-arm64.tar.gz"
    mode: '0644'

- name: Extract compiled Python binaries
  ansible.builtin.unarchive:
    src: "/tmp/python{{ python_version }}-arm64.tar.gz"
    dest: "{{ ansible_user_dir }}/.pyenv/versions/"
    remote_src: yes
    creates: "{{ ansible_user_dir }}/.pyenv/versions/{{ python_version }}/bin/python3"

- name: Ensure PYENV_ROOT is set in .bashrc
  ansible.builtin.lineinfile:
    path: "{{ ansible_user_dir }}/.bashrc"
    line: 'export PYENV_ROOT="$HOME/.pyenv"'
    insertafter: EOF
    state: present

- name: Ensure pyenv bin is in PATH
  ansible.builtin.lineinfile:
    path: "{{ ansible_user_dir }}/.bashrc"
    line: '[[ -d "$PYENV_ROOT/bin" ]] && export PATH="$PYENV_ROOT/bin:$PATH"'
    insertafter: EOF
    state: present

- name: Ensure pyenv is initialized in .bashrc
  ansible.builtin.lineinfile:
    path: "{{ ansible_user_dir }}/.bashrc"
    line: 'eval "$(pyenv init - bash)"'
    insertafter: EOF
    state: present

# Immediately load .bashrc environment for subsequent steps
- name: Source bashrc immediately
  ansible.builtin.shell: |
    source "{{ ansible_user_dir }}/.bashrc"
  args:
    executable: /bin/bash
  changed_when: false

- name: Set global Python version to {{ python_version }}
  ansible.builtin.shell: |
    {{ ansible_user_dir }}/.pyenv/bin/pyenv global {{ python_version }}
  args:
    executable: /bin/bash

- name: Rehash pyenv to update shims
  ansible.builtin.shell: |
    {{ ansible_user_dir }}/.pyenv/bin/pyenv rehash
  args:
    executable: /bin/bash

- name: Add Python shared library path to ld.so.conf.d (system-wide fix)
  become: yes
  ansible.builtin.copy:
    dest: "/etc/ld.so.conf.d/python-{{ python_version }}.conf"
    content: "{{ ansible_user_dir }}/.pyenv/versions/{{ python_version }}/lib"
    mode: '0644'

- name: Run ldconfig to reload library paths
  become: yes
  ansible.builtin.command: ldconfig

- name: Verify Python version again after system-wide library fix
  ansible.builtin.shell: |
    {{ ansible_user_dir }}/.pyenv/shims/python --version
  register: python_check
  changed_when: false

- name: Display Python version installed on Pi Zeros
  ansible.builtin.debug:
    msg: "{{ python_check.stdout }}"
